#!/bin/bash
if [ -z $SCRIPTPATH ]; then
   SCRIPT=$0
   pushd $(dirname $0) > /dev/null
   export SCRIPTPATH=$(pwd)
   popd > /dev/null
fi
. $SCRIPTPATH/commonfn
PROG=$0

_mandatoryproperties="HOME"

#
#
#
function showUsage {
   cat << _usageEOM
$PROG [ -a archive ] [ -h ] [ -v ] <gerber directory>

To convert the Gerber files generated by KiCAD to OSHPark
compatible format.

The --stensil option will generate an additional archive
for OshStensils.

  -a | --archive - Set the archive name
  -h | --help    - This help
  -s | --stensil - Sensil
  -v | --Verbose - Verbose or debug mode

$(displayProperties)

_usageEOM
}


# === ALTERNATE OPTION HANDLING FUNCTION
# The new handleOptions function that will handle both
# short and long options. There are some caveats in that
# concatenated options are not tolerated i.e. -abc should
# be provided as -a -b -c.
# On completion, the _ARGS variable will be set with the
# remainging command line arguments to the command.
function handleOptions {
   cl=$(getopt -o a:vsh --long archive:,verbose,stensil,help -n optionTest -- "$@")
   debug $cl
   eval set -- "$cl"
   while true; do
      debug "$1 of $*"
      case "$1" in
      -a | --archive ) hasArgument "$1" "$2"; _archive=$2; shift 2;;
      -h | --help ) debug "Help was chosen"; showUsage; exit ;;
      -s | --stensil) debug "Stensil was chosen"; _stensil=true; shift;;
      -v | --verbose ) debug "verbose was chosen"; _debug=true; shift ;;
      --* ) debug "handleOptions"; shift; break ;;
      -*) debug "handleOptions $1"
          if [ -z $1 ]; then
             break
          else
             showError "Option $1 is an invalid"
         fi
      ;;
      *) debug "handleOptions $1"; break;;
      esac
   done
   debug "remaining ARGS=$*"
   __ARGS=$*
}

function renamegbrs() {

  # _kicadMask="B_Cu B_Mask B_SilkS Edge_Cuts F_Cu F_Mask F_SilkS B_Paste F_Paste"
  _kicadMask="B.Cu B.Mask B.SilkS Edge.Cuts F.Cu F.Mask F.SilkS B.Paste F.Paste GND PWR"
  # _oshparkext="gbl gbs gbo gko gtl gts gto gbp gtp"
  _oshparkext="GBL GBS GBO GKO GTL GTS GTO GBP GTP G2L G3L"

   _masks=( $_kicadMask )
   _osh=( $_oshparkext )
   _mlen=${#_masks[@]}
   for (( i=0;i<$_mlen;i++ )); do
      mask="${_masks[${i}]}"
      candidate=$(trim $(find ${_gerber} -type f \( -name "*${mask}.gbr" -o -name "*${mask}.gm1" \) ))
      debug "CANDIDATE=${candidate} from ${mask}"
      if [ -e "${candidate}" ]; then
         stripped=$(filename ${candidate})
         newName=${stripped}.${_osh[${i}]}
         pathName=$(path ${candidate})
         debug "moving ${candidate} to ${pathName}/${newName}"
         mv ${candidate} ${pathName}/${newName}
      fi
   done
}
# =========================================================================================

_stensil=false
handleOptions $*
eval set -- "$__ARGS"

# configFile=$1
configFile=${configFile:="NONE"}
propNames=($(getPropertyNames))
debug "configFile=$configFile"
doGetConfig $configFile propNames[@]



# The default archive name is the gerber directory, if supplied or the parent
# directory name.
# No gerber directory implies the current directory
# default archive is the gerber directory (parent if current)

_gerber=$1
_stensil_archive=""
if [ -n "${_gerber}" ]; then
debug "_gerber is set $_gerber"
   if [ ! -d ${_gerber} ]; then
      showError "The gerber directory should exist"
   fi
   if [ -z ${_archive} ]; then
      _stensil_archive=${_gerber}_stensil.zip
      _archive=${_gerber}.zip
   else
      debug "The archive is set. Use this to derrive a stensil name"
      _stensil_archive=$(filename $_archive)_stensil.zip
      _stensil_archive=$(path $_archive)/$_stensil_archive
   fi
   debug "Set the archive and stensil archive from the gerber name:  _archive=$_archive, _stensil_archive=$_stensil_archive"
else
debug "_gerber is not set, using the current working directory"
   _gerber=$(pwd)
   if [ -z ${_archive} ]; then
      _stensil_archive=$(pwd)_stensil.zip
      _archive=$(pwd).zip
      debug "Set the archive and stensil archive from the current directory _archive=$_archive, _stensil_archive=$_stensil_archive"
   fi
fi

debug "_gerber=$_gerber, _archive=$_archive, _stensil=$_stensil _stensil_archive=$_stensil_archive"

renamegbrs

cd ${_gerber}/..
gdir=$(basename ${_gerber})
debug "gdir=${gdir}"
zip -ur ${_archive} ${gdir} -x ${gdir}/*-[FB].Paste.G[TB]P


if [ "$_stensil" = "true" ]; then
   debug "Creating stensil archive"
   debug "zip -ur ${_stensil_archive} ${gdir}/*-[FB].Paste.G[TB]P ${gdir}/*-Edge.Cuts.GKO"
   zip -ur ${_stensil_archive} ${gdir}/*-[FB].Paste.G[TB]P ${gdir}/*-Edge.Cuts.GKO
fi
